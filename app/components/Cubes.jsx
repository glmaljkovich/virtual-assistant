/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useEffect, useState } from 'react'
import { useGLTF, PerspectiveCamera, useAnimations, useEnvironment, Points, PointMaterial } from '@react-three/drei'
import { useFrame } from '@react-three/fiber'
import { Select } from "@react-three/postprocessing"
import { random } from 'maath'

const white = "#fff"

export function Light1(props) {
    const purple = "#6d28d9"
    return (
        <directionalLight
          name="Light"
          intensity={1107}
          decay={5}
          color={purple}
          position={[8.772, 16.303, -11.698]}
          rotation={[-2.158, 0.359, 1.933]}>
          <group position={[0, 0, -1]} />
        </directionalLight>
    )
}

export function Light2(props) {
    const green = "#1bff12"
    return (
        <spotLight
          name="Spot"
          intensity={5158}
          angle={0.531}
          penumbra={0.818}
          decay={5}
          color={"#1b1bff"}
          position={[12, 5, -5]}
          rotation={[-2.23, 1.168, 0.445]}>
          <group position={[0, 0, -1]} />
        </spotLight>
    )
}

export function Camera(props = {default: boolean = true}) {
    return (
        <PerspectiveCamera
        name="Camera"
        far={50.1}
        near={0.1}
        makeDefault={props.default}
        fov={29.839}
        position={[4.636, 3.524, -15.572]}
        rotation={[-40, 0.307, 3.098]}
        scale={3.86}
      />
    )
}

export function Stars(props) {
  const ref = useRef()
  const [sphere] = useState(() => random.inSphere(new Float32Array(5000), { radius: 20 }))
  useFrame((state, delta) => {
    ref.current.rotation.x -= delta / 10
    ref.current.rotation.y -= delta / 15
  })
  return (
    <group rotation={[0, 0, Math.PI / 4]}>
      <Points ref={ref} positions={sphere} stride={3} frustumCulled={false} {...props}>
        <PointMaterial transparent color="#ffa0e0" size={0.05} sizeAttenuation={true} depthWrite={false} />
      </Points>
    </group>
  )
}

export function Cubes(props) {
  const [hovered, hover] = useState(null)
  const group = useRef()
  const { nodes, materials, animations } = useGLTF('/cubes5.glb')
  const { actions } = useAnimations(animations, group)
  const env = useEnvironment({ preset: "night" })
  useEffect(() => {
    actions?.Scene.play().setEffectiveTimeScale(1.5)
  })
  const over = (name) => (e) => (e.stopPropagation(), hover(name))
  const clicker = (name) => (e) => {
    e.stopPropagation()
    if (hovered === name) {
      e.object.scale = {x:0.5,y:0.5,z:0.5}
    }
  }

  return (
    <group name="Cubes" ref={group} {...props} >
        <Select enabled={hovered === "Cube"} onPointerOver={over("Cube")} onPointerOut={over(null)}>
        <mesh
          name="Cube"
          material-envMap={env}
          castShadow
          receiveShadow
          geometry={nodes.Cube.geometry}
          material={materials['Anti-slip plate star 3']}
          position={[-1.634, -0.518, -0.366]}
          rotation={[0.955, Math.PI / 6, -0.615]}
        />
        </Select>

        <Select enabled={hovered === "Cube001"} onPointerOver={over("Cube001")} onPointerOut={over(null)} onClick={clicker("Cube001")}>
        <mesh
          name="Cube001"
          material-envMap={env}
          castShadow
          receiveShadow
          geometry={nodes.Cube001.geometry}
          material={materials['Anti-slip plate star 3']}
          position={[-0.384, 1.25, 0.884]}
          rotation={[0.955, Math.PI / 6, -0.615]}
        />
        </Select>
        <Select enabled={hovered === "Cube002"} onPointerOver={over("Cube002")} onPointerOut={over(null)} onClick={clicker("Cube002")}>
        <mesh
          name="Cube002"
          material-envMap={env}
          castShadow
          receiveShadow
          geometry={nodes.Cube002.geometry}
          material={materials['Anti-slip plate star 3']}
          position={[-2.884, 1.25, -1.616]}
          rotation={[0.955, Math.PI / 6, -0.615]}
        />
        </Select>
        <Select enabled={hovered === "Cube003"} onPointerOver={over("Cube003")} onPointerOut={over(null)} onClick={clicker("Cube003")}>
          <mesh
            name="Cube003"
            material-envMap={env}
            castShadow
            receiveShadow
            geometry={nodes.Cube003.geometry}
            material={materials['Anti-slip plate star 3']}
            position={[-1.634, 3.018, -0.366]}
            rotation={[0.955, Math.PI / 6, -0.615]}
          />
        </Select>
        <Select enabled={hovered === "Cube004"} onPointerOver={over("Cube004")} onPointerOut={over(null)} onClick={clicker("Cube004")}>
          <mesh
            name="Cube004"
            material-envMap={env}
            castShadow
            receiveShadow
            geometry={nodes.Cube004.geometry}
            material={materials['Anti-slip plate star 3']}
            position={[-1.116, 1.25, -3.384]}
            rotation={[0.955, Math.PI / 6, -0.615]}
          />
        </Select>

        <Select enabled={hovered === "Cube005"} onPointerOver={over("Cube005")} onPointerOut={over(null)} onClick={clicker("Cube005")}>
          <mesh
            name="Cube005"
            material-envMap={env}
            castShadow
            receiveShadow
            geometry={nodes.Cube005.geometry}
            material={materials['Anti-slip plate star 3']}
            position={[0.134, 3.018, -2.134]}
            rotation={[0.955, Math.PI / 6, -0.615]}
          />
        </Select>

        <Select enabled={hovered === "Cube006"} onPointerOver={over("Cube006")} onPointerOut={over(null)} onClick={clicker("Cube006")}>
          <mesh
            name="Cube006"
            material-envMap={env}
            castShadow
            receiveShadow
            geometry={nodes.Cube006.geometry}
            material={materials['Anti-slip plate star 3']}
            position={[0.134, -0.518, -2.134]}
            rotation={[0.955, Math.PI / 6, -0.615]}
          />
        </Select>

        <Select enabled={hovered === "Cube007"} onPointerOver={over("Cube007")} onPointerOut={over(null)} onClick={clicker("Cube007")}>
          <mesh
            name="Cube007"
            material-envMap={env}
            castShadow
            receiveShadow
            geometry={nodes.Cube007.geometry}
            material={materials['Anti-slip plate star 3']}
            position={[1.384, 1.25, -0.884]}
            rotation={[0.955, Math.PI / 6, -0.615]}
          />
        </Select>
    </group>
  )
}